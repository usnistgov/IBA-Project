function [OccupantMatrix] = SetDynamicParameters(...
    OccupantMatrix,SimulationTime,occmodel,simtimestep,OutdoorCondition,bcvtbveczone,ENumInOcc,...
    closetting,mornclo_regressionparameters,...
    postpredmat_sens,controls,randomseed,...
    Season,DayTime,WeekTime,Day,holiday,group_logisticregression_inter,...
    group_logisticregression_arrive,RuleVector,eplusstdocc,humphact,...
    walkchecktimestep,trm)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%    Copyright 2016 Jared Langevin                                         %
%                                                                          %
%    Licensed under the Apache License, Version 2.0 (the "License");       %
%    you may not use this file except in compliance with the License.      %
%    You may obtain a copy of the License at                               %
%                                                                          %
%        http://www.apache.org/licenses/LICENSE-2.0                        %
%                                                                          %
%    Unless required by applicable law or agreed to in writing, software   %
%    distributed under the License is distributed on an "AS IS" BASIS,     %
%    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       %
%    implied. See the License for the specific language governing          %
%    permissions and limitations under the License.                        %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Declare Variable
intnum = 0;
intnum = size(OccupantMatrix,2);
noisemat = zeros(4,intnum);
NumInOffice = 0; 
counter_occ = 0;  % A counter for the number of occupants who have been simulated in office
Pro=0;
BehaviorInterval=size(OccupantMatrix(1).OccBehaviorInterval,2);

temp=1;
rrr=repmat({0},1,temp);
vvv2=repmat({[0 0]},1,temp);
vvv4=repmat({[0 0 0 0]},1,temp);
vvv8=repmat({[0 0 0 0 0 0 0 0]},1,temp);
vvvX=repmat({zeros(1,BehaviorInterval)},1,temp);
mmm22=repmat({zeros(2,2)},1,temp);
mmm25=repmat({zeros(2,5)},1,temp);
mmm105=repmat({zeros(10,5)},1,temp);
mmm110=repmat({zeros(1,10)},1,temp);
mmm210=repmat({zeros(2,10)},1,temp);
SocialMatrix = struct('Zone',rrr,'Validate',rrr,'OfficeNum',rrr,...
    'OfficeType',rrr,'OccupantNum',rrr,'Gender',rrr,'CommuteMet',rrr,...
    'OutWalkMet',rrr,'InWalkMet',rrr,'BaseMet',rrr,...
    'CommuteMetDegrade',rrr,'OutWalkMetDegrade',rrr,...
    'InWalkMetDegrade',rrr,'METevent',rrr,'TimeDecay',rrr,...
    'MetabolicRate',rrr,'OccupancyStateVector',vvv2,...
    'OccupancyStateVectorPrevious',vvv2,'InOffice',rrr,...
    'OutofOffice',rrr,'InSaturday',rrr,'InSundHolidays',rrr,...
    'DayStartTimeBase',rrr,'LunchStartTimeBase',rrr,...
    'LunchEndTimeBase',rrr,'DayEndTimeBase',rrr,'DayStartTime',rrr,...
    'LunchStartTime',rrr, 'LunchEndTime',rrr,'DayEndTime',rrr,...
    'SatDayStartTimeBase',rrr,'SatLunchStartTimeBase',rrr,...
    'SatLunchEndTimeBase',rrr,'SatDayEndTimeBase',rrr,...
    'SatDayStartTime',rrr,'SatLunchStartTime',rrr,...
    'SatLunchEndTime',rrr,'SatDayEndTime',rrr,...
    'SHDayStartTimeBase',rrr,'SHLunchStartTimeBase',rrr,...
    'SHLunchEndTimeBase',rrr,'SHDayEndTimeBase',rrr,...
    'SHDayStartTime',rrr,'SHLunchStartTime',rrr,...
    'SHLunchEndTime',rrr,'SHDayEndTime',rrr,...
    'OfficeWalkProb',rrr,'LeavesLunchProb',rrr,...
    'MorningClothing',rrr,'CurrentClothing',rrr,...
    'PersonalConstraints',mmm25,'AcceptabilityVector',vvv8,...
    'PreferenceClass',vvv4,'BehaviorConstraintsMatrix',mmm210,...
    'InitialBehaviorPossibilitiesMatrix',mmm210,...
    'BehaviorPossibilitiesMatrix',mmm210,...
    'InitialBehaviorHierarchyMatrix',mmm210,...
    'BehaviorHierarchyMatrix',mmm210,...
    'InitialBehaviorStatesVector',mmm110,...
    'BehaviorStatesVector',mmm110,...
    'PreviousBehaviorStatesVector',mmm110,...
    'BehaviorConstraintsState',mmm105,...
    'InitialPersonalDeviceLocation',vvv2,'PersonalDeviceLocation',vvv2,...
    'SharedThermNum',rrr,'SharedDoorNum',rrr,'SharedWindowNum',rrr,...
    'SharedBlindNum',rrr,'IndoorEnvironmentVectorBase',vvv4,...
    'IndoorEnvironmentVector',vvv4,'OutdoorEnvironmentVector',vvv2,...
    'PMVdraw',rrr,'PMVact',rrr,'HumphreysPMVact',rrr,'WhichPMVact',rrr,...
    'ExceedWarm',rrr,'ExceedCold',rrr,'MeanProductivity',rrr,...
    'ProductivityCount',rrr,'OccTimeSteps',rrr,'OccPosition',vvv2,...
    'OccBehaviorInterval',vvvX);
SharedMat = struct('Zone',rrr,'Validate',rrr,'OfficeNum',rrr,...
    'OfficeType',rrr,'OccupantNum',rrr,'Gender',rrr,'CommuteMet',rrr,...
    'OutWalkMet',rrr,'InWalkMet',rrr,'BaseMet',rrr,...
    'CommuteMetDegrade',rrr,'OutWalkMetDegrade',rrr,...
    'InWalkMetDegrade',rrr,'METevent',rrr,'TimeDecay',rrr,...
    'MetabolicRate',rrr,'OccupancyStateVector',vvv2,...
    'OccupancyStateVectorPrevious',vvv2,'InOffice',rrr,...
    'OutofOffice',rrr,'InSaturday',rrr,'InSundHolidays',rrr,...
    'DayStartTimeBase',rrr,'LunchStartTimeBase',rrr,...
    'LunchEndTimeBase',rrr,'DayEndTimeBase',rrr,'DayStartTime',rrr,...
    'LunchStartTime',rrr, 'LunchEndTime',rrr,'DayEndTime',rrr,...
    'SatDayStartTimeBase',rrr,'SatLunchStartTimeBase',rrr,...
    'SatLunchEndTimeBase',rrr,'SatDayEndTimeBase',rrr,...
    'SatDayStartTime',rrr,'SatLunchStartTime',rrr,...
    'SatLunchEndTime',rrr,'SatDayEndTime',rrr,...
    'SHDayStartTimeBase',rrr,'SHLunchStartTimeBase',rrr,...
    'SHLunchEndTimeBase',rrr,'SHDayEndTimeBase',rrr,...
    'SHDayStartTime',rrr,'SHLunchStartTime',rrr,...
    'SHLunchEndTime',rrr,'SHDayEndTime',rrr,...
    'OfficeWalkProb',rrr,'LeavesLunchProb',rrr,...
    'MorningClothing',rrr,'CurrentClothing',rrr,...
    'PersonalConstraints',mmm25,'AcceptabilityVector',vvv8,...
    'PreferenceClass',vvv4,'BehaviorConstraintsMatrix',mmm210,...
    'InitialBehaviorPossibilitiesMatrix',mmm210,...
    'BehaviorPossibilitiesMatrix',mmm210,...
    'InitialBehaviorHierarchyMatrix',mmm210,...
    'BehaviorHierarchyMatrix',mmm210,...
    'InitialBehaviorStatesVector',mmm110,...
    'BehaviorStatesVector',mmm110,...
    'PreviousBehaviorStatesVector',mmm110,...
    'BehaviorConstraintsState',mmm105,...
    'InitialPersonalDeviceLocation',vvv2,'PersonalDeviceLocation',vvv2,...
    'SharedThermNum',rrr,'SharedDoorNum',rrr,'SharedWindowNum',rrr,...
    'SharedBlindNum',rrr,'IndoorEnvironmentVectorBase',vvv4,...
    'IndoorEnvironmentVector',vvv4,'OutdoorEnvironmentVector',vvv2,...
    'PMVdraw',rrr,'PMVact',rrr,'HumphreysPMVact',rrr,'WhichPMVact',rrr,...
    'ExceedWarm',rrr,'ExceedCold',rrr,'MeanProductivity',rrr,...
    'ProductivityCount',rrr,'OccTimeSteps',rrr,'OccPosition',vvv2,...
    'OccBehaviorInterval',vvvX);
SocialMatrix = OccupantMatrix([0,0]&[0,0]);
SharedMat = OccupantMatrix([0,0]&[0,0]);
%% Seed random number generator
rng(randomseed,'twister');
%% load Airflow ANN model
persistent Conf_MRT_Airflow Conf_T_Airflow Conf_V_Airflow Encl_MRT_Airflow Encl_T_Airflow Encl_V_Airflow Open_Med_MRT_Airflow Open_Med_T_Airflow Open_Med_V_Airflow ANN_Load_indicator TestSeason DaylightSaving
if isempty(ANN_Load_indicator)
    Conf_MRT_Airflow=load('Conf_MRT_v2.mat');
    Conf_T_Airflow=load('Conf_T_v2.mat');
    Conf_V_Airflow=load('Conf_V_v2.mat');
    Encl_MRT_Airflow=load('Encl_MRT_v2.mat');
    Encl_T_Airflow=load('Encl_T_v2.mat');
    Encl_V_Airflow=load('Encl_V_v2.mat');
    Open_Med_MRT_Airflow=load('Open_Med_MRT_v2.mat');
    Open_Med_T_Airflow=load('Open_Med_T_v2.mat');
    Open_Med_V_Airflow=load('Open_Med_V_v2.mat');
    ANN_Load_indicator=1;
    TestSeason=xlsread('settings.csv', 1,'B2');
    if TestSeason==1
        DaylightSaving=0;
    else
        DaylightSaving=1;
    end
end

%% Setting for adapted occupancy model
if occmodel(1) == 3
    % A vector to record simulated occupancy status
    OccupancyVec=zeros(1,size(OccupantMatrix,2));
    for u = 1:size(OccupantMatrix,2)
        OccupancyVec(1,u)=OccupantMatrix(u).InOffice;
    end
    NumInOffice = sum(OccupancyVec);   % Number of currently occupants in office
    Pro=ENumInOcc/size(OccupantMatrix,2);   % Possibility of each occupant in office
end

%% If the simulation day time is 6 AM, create a noise matrix
% This adds random noise around each occupant's expected occupancy times
if ((abs(DayTime - (6/24)) < (5/60/24)) && occmodel(1) == 1)
    for omr = 1:4
        for omc = 1:size(OccupantMatrix,2)
            noisemat(omr,omc) = (0 + ((8/60/24)*(normrnd(0,1))));
            % Don't allow noise more than 30 minutes around initial
            % occupancy time settings
            while (abs(noisemat(omr,omc))>=(30/60/24))
                noisemat(omr,omc) = (0 + ((8/60/24)*(normrnd(0,1))));
            end
        end
    end
end

%% Cycle through all the occupants in the zone, updating their parameters
for n = 1:size(OccupantMatrix,2)
    % At 7:40 AM on each day's occupancy, reset agent occupancy times (+
    % noise), and morning clothing level
    if (abs(DayTime - ((7+40/60-DaylightSaving)/24)) < (1.5/60/24)) % only for the timestep when the first occupant get office (YC 2022/02/11)
        % Update personal occupancy times (update day and add some noise
        % (+/- <30 mins to each time)
        if occmodel(1) == 1
            % Sunday/holiday occupancy times
            if ((holiday==1)||(WeekTime == 1))&&...
                    (OccupantMatrix(n).InSundHolidays==1)
                OccupantMatrix(n).SHDayStartTime = ...
                    (OccupantMatrix(n).SHDayStartTimeBase /24) ...
                    + Day + noisemat(1,n);
                OccupantMatrix(n).SHDayEndTime = ...
                    (OccupantMatrix(n).SHDayEndTimeBase /24) + Day + ...
                    noisemat(1,n);
                if isfinite(OccupantMatrix(n).SHLunchStartTimeBase)
                    OccupantMatrix(n).SHLunchStartTime = ...
                        (OccupantMatrix(n).SHLunchStartTimeBase /24) + ...
                        Day + noisemat(1,n);
                    OccupantMatrix(n).SHLunchEndTime = ...
                        (OccupantMatrix(n).SHLunchStartTime) + ...
                        ((OccupantMatrix(n).SHLunchEndTimeBase - ...
                        OccupantMatrix(n).SHLunchStartTimeBase)/24) + ...
                        noisemat(1,n);
                else
                    OccupantMatrix(n).SHLunchStartTime = ...
                        OccupantMatrix(n).SHDayEndTime;
                    OccupantMatrix(n).SHLunchEndTime = ...
                        OccupantMatrix(n).SHDayStartTime;
                end
                % Saturday occupancy times
            elseif (WeekTime == 7)&&(OccupantMatrix(n).InSaturday==1)
                OccupantMatrix(n).SatDayStartTime = ...
                    (OccupantMatrix(n).SatDayStartTimeBase /24) + Day + ...
                    noisemat(1,n);
                OccupantMatrix(n).SatDayEndTime = ...
                    (OccupantMatrix(n).SatDayEndTimeBase /24) + Day + ...
                    noisemat(1,n);
                if isfinite(OccupantMatrix(n).SatLunchStartTimeBase)
                    OccupantMatrix(n).SatLunchStartTime = ...
                        (OccupantMatrix(n).SatLunchStartTimeBase /24) + ...
                        Day + noisemat(1,n);
                    OccupantMatrix(n).SatLunchEndTime = ...
                        (OccupantMatrix(n).SatLunchStartTime) + ...
                        ((OccupantMatrix(n).SatLunchEndTimeBase - ...
                        OccupantMatrix(n).SatLunchStartTimeBase)/24) + ...
                        noisemat(1,n);
                else
                    OccupantMatrix(n).SatLunchStartTime = ...
                        OccupantMatrix(n).SatDayEndTime;
                    OccupantMatrix(n).SatLunchEndTime = ...
                        OccupantMatrix(n).SatDayStartTime;
                end
                % Weekday occupancy times
            elseif (WeekTime>1 && WeekTime <7 && holiday == 0)
                OccupantMatrix(n).DayStartTime = ...
                    (OccupantMatrix(n).DayStartTimeBase /24) + Day + ...
                    noisemat(1,n);
                OccupantMatrix(n).DayEndTime = ...
                    (OccupantMatrix(n).DayEndTimeBase /24) + Day + ...
                    noisemat(1,n);
                if isfinite(OccupantMatrix(n).LunchStartTimeBase)
                    OccupantMatrix(n).LunchStartTime = ...
                        (OccupantMatrix(n).LunchStartTimeBase /24) + ...
                        Day + noisemat(1,n);
                    OccupantMatrix(n).LunchEndTime = ...
                        (OccupantMatrix(n).LunchStartTime) + ...
                        ((OccupantMatrix(n).LunchEndTimeBase - ...
                        OccupantMatrix(n).LunchStartTimeBase)/24) + ...
                        noisemat(1,n);
                else
                    OccupantMatrix(n).LunchStartTime = ...
                        OccupantMatrix(n).DayEndTime;
                    OccupantMatrix(n).LunchEndTime = ...
                        OccupantMatrix(n).DayStartTime;
                end
            end
        end
        
        % Update 6 AM outdoor temperature (input to morning clothing
        % regression model)
        OccupantMatrix(n).OutdoorEnvironmentVector(1) = OutdoorCondition(1,1);  %OT is same for occupants
        
        % Update morning clothing based on outdoor temperature, occupant's
        % preference class (greater than 'Neutral' ideal sensation or less
        % than or equal to 'Neutral' ideal sensation), and previous day's
        % clothing. * Note: do not update morning clothing in case of
        % one user-defined behavior rule in which clothing is fixed at
        % standard summer/winter values
        if any(RuleVector == 5)
            if (Season == 1||Season == 4)
                OccupantMatrix(n).MorningClothing = 0.5;
            else
                OccupantMatrix(n).MorningClothing = 1.0;
            end
            OccupantMatrix(n).CurrentClothing = ...
                OccupantMatrix(n).MorningClothing;
        else
            % Sample noise around the mean morning clothing value based
            % on Root Mean Square Error of the regression predictions
            errnoise = normrnd(0,mornclo_regressionparameters(5));
            % Sample morning clothing value
            mornclo = exp((((mornclo_regressionparameters(1)) + ...
                (mornclo_regressionparameters(2)*...
                (OccupantMatrix(n).OutdoorEnvironmentVector(1))) + ...
                (mornclo_regressionparameters(3)*...
                OccupantMatrix(n).PreferenceClass(Season))) + ...
                (mornclo_regressionparameters(4)*...
                (OccupantMatrix(n).MorningClothing))));  % delete the "errnoise" to set the fixed morning clothing level for each occupant (YC 2022/02/11)
            % Resample morning clothing value when outside of typical
            % office limits (0.3 to 1.3 clo)
            while (mornclo<0.3 || mornclo>1.3)
                errnoise = normrnd(0,mornclo_regressionparameters(5));
                mornclo = exp((((mornclo_regressionparameters(1)) + ...
                    (mornclo_regressionparameters(2)*...
                    (OccupantMatrix(n).OutdoorEnvironmentVector(1))) + ...
                    (mornclo_regressionparameters(3)*...
                    OccupantMatrix(n).PreferenceClass(Season))) + ...
                    (mornclo_regressionparameters(4)*...
                    (OccupantMatrix(n).MorningClothing)))+errnoise);
            end
            % Update agent morning clothing parameter
            OccupantMatrix(n).MorningClothing = mornclo;
            % Update agent current clothing to new morning clothing value
            OccupantMatrix(n).CurrentClothing = ...
                OccupantMatrix(n).MorningClothing;
        end
    end
    
    % Update agent occupancy status
    
    % Case where occupancy model is specified as Enregy Plus standard
    % occupancy schedule fractions
    if occmodel(1) == 0
        % Determine hour of the day
        dayhour = (floor((DayTime)*24));
        if (holiday == 1) || (WeekTime == 1) % Holidays/Sundays
            OccupantMatrix(n).OccupancyStateVector(:) = ...
                binornd(1,eplusstdocc(3,dayhour+1));
        elseif (WeekTime == 7) % Saturdays
            OccupantMatrix(n).OccupancyStateVector(:) = ...
                binornd(1,eplusstdocc(2,dayhour+1));
        else % Weekdays
            OccupantMatrix(n).OccupancyStateVector(:) = ...
                binornd(1,eplusstdocc(1,dayhour+1));
        end
        
        % Case where occupancy model is specified as number of Enregy Plus
        % occupancy schedule
    elseif occmodel(1) == 3
        % The number of currently occupants in office is different with
        % the number of E+ occupancy schedule at this simulating time step;
        % for all occupants, re-determine occupancy status 
        if NumInOffice~=ENumInOcc     
            if counter_occ < ENumInOcc
                % If the number of undetermined occupants is not enough to
                % fill in, the occupant who is simulating must be in office
                if (size(OccupantMatrix,2)-n)<(ENumInOcc-counter_occ)
                    OccupantMatrix(n).OccupancyStateVector(1)=1;
                    OccupantMatrix(n).OccupancyStateVector(2)=1;
                    counter_occ = counter_occ+1;
                else % Else using binomial distribution to check 
                    OccupantMatrix(n).OccupancyStateVector(1)=binornd(1,Pro);
                    OccupantMatrix(n).OccupancyStateVector(2)=OccupantMatrix(n).OccupancyStateVector(1);
                    if  OccupantMatrix(n).OccupancyStateVector(1)==1
                        counter_occ = counter_occ+1;
                    end
                end
                % If the simulated number of occupant in office is equal to
                % E+ occupancy scheduel, others will be out of office
            else 
                OccupantMatrix(n).OccupancyStateVector(1)=0;
                OccupantMatrix(n).OccupancyStateVector(2)=0;
            end
        end
        
        % Case where a non-standard occupancy model is used
    else
        OccupantMatrix(n) = OccupancyGenerator(...
            OccupantMatrix(n),SimulationTime,occmodel,...
            walkchecktimestep,holiday,WeekTime);
    end
    
    % Update whether the occupant is in or out of the office
    if OccupantMatrix(n).OccupancyStateVector(2) == 1
        OccupantMatrix(n).InOffice = 1;
    else
        OccupantMatrix(n).InOffice = 0;
        OccupantMatrix(n).OccPosition(:) = [0 0];
    end
    
    % Case where occupant is in the office
    if OccupantMatrix(n).InOffice == 1
        DenseOcc=0;  % Dense occupancy case indicator
        if length(OccupantMatrix)==35 || length(OccupantMatrix)==3 || length(OccupantMatrix)==15
            DenseOcc=1;
        end
       % Determine occupant position
       if NumInOffice~=ENumInOcc 
         % After re-determining occupancy status, re-determine in-office
         % occupants' coordinate
        Position = Coordinate(OccupantMatrix(n),ENumInOcc,counter_occ,DenseOcc);
        OccupantMatrix(n).OccPosition(:) = Position;
       end
        
        % Update occupied time step count
        OccupantMatrix(n).OccTimeSteps = OccupantMatrix(n).OccTimeSteps + 1;
        
        % If user-defined behavior rule is agent-based, update behavior
        % constraints and any shared control states
        if any(RuleVector >= 4)
            OccupantMatrix(n).BehaviorConstraintsState = zeros(10,5);
        end
        
        if OccupantMatrix(n).OfficeType == 3
            ANN_input=[bcvtbveczone(4),bcvtbveczone(5),bcvtbveczone(11),bcvtbveczone(10),...
                bcvtbveczone(9),bcvtbveczone(13),bcvtbveczone(8),bcvtbveczone(12),bcvtbveczone(6),...
                bcvtbveczone(7),ENumInOcc,OccupantMatrix(n).OccPosition(1),OccupantMatrix(n).OccPosition(2)];
            % occupant's coordinate temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(1)=predict(Conf_T_Airflow.net,ANN_input); 
            % occupant's coordinate mean radiant temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(4)=predict(Conf_MRT_Airflow.net,ANN_input);
            % occupant's coordinate air velocity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(3)=predict(Conf_V_Airflow.net,ANN_input);
            % Zone-level relative humidity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(2) = bcvtbveczone(3); 
        elseif OccupantMatrix(n).OfficeType == 6
            ANN_input=[bcvtbveczone(4),bcvtbveczone(5),...
                (bcvtbveczone(6)+bcvtbveczone(7)+bcvtbveczone(8)+bcvtbveczone(9)+bcvtbveczone(10)+bcvtbveczone(11))/6,...
                ENumInOcc,OccupantMatrix(n).OccPosition(1),OccupantMatrix(n).OccPosition(2)];
            % occupant's coordinate temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(1)=predict(Open_Med_T_Airflow.net,ANN_input); 
            % occupant's coordinate mean radiant temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(4)=predict(Open_Med_MRT_Airflow.net,ANN_input);
            % occupant's coordinate air velocity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(3)=predict(Open_Med_V_Airflow.net,ANN_input);
            % Zone-level relative humidity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(2) = bcvtbveczone(3); 
        elseif OccupantMatrix(n).OfficeType == 2
            if OccupantMatrix(n).Zone == 2
                ANN_input=[bcvtbveczone(5),bcvtbveczone(4),(bcvtbveczone(8)+bcvtbveczone(11))/2,...
                    (bcvtbveczone(12)+bcvtbveczone(15))/2,(bcvtbveczone(9)+bcvtbveczone(10))/2,ENumInOcc,...
                    OccupantMatrix(n).OccPosition(1),OccupantMatrix(n).OccPosition(2)];
            elseif OccupantMatrix(n).Zone == 3
                ANN_input=[bcvtbveczone(5),bcvtbveczone(4),bcvtbveczone(10),...
                    bcvtbveczone(14),(bcvtbveczone(8)+bcvtbveczone(9)+bcvtbveczone(11))/3,ENumInOcc,...
                    OccupantMatrix(n).OccPosition(1),OccupantMatrix(n).OccPosition(2)];
            end
            % occupant's coordinate temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(1)=predict(Encl_T_Airflow.net,ANN_input); 
            % occupant's coordinate mean radiant temperature 
            OccupantMatrix(n).IndoorEnvironmentVectorBase(4)=predict(Encl_MRT_Airflow.net,ANN_input);
            % occupant's coordinate air velocity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(3)=predict(Encl_V_Airflow.net,ANN_input);
            % Zone-level relative humidity
            OccupantMatrix(n).IndoorEnvironmentVectorBase(2) = bcvtbveczone(3); 
        end
            % Outdoor ambient temperature (for non- 6AM time)
            if (abs(DayTime - (6/24)) >= (5/60/24))
                OccupantMatrix(n).OutdoorEnvironmentVector(1) = OutdoorCondition(1);
            end
            % Outdoor relative humidity
            OccupantMatrix(n).OutdoorEnvironmentVector(2) =  OutdoorCondition(2);
        
        % Add local effects of previous behavior actions
        % (air temp./radiant temp., air velocity)
        ControlStates = ChangeEffects(OccupantMatrix(n),controls);
        
        % Local ambient temperature
        OccupantMatrix(n).IndoorEnvironmentVector(1) = ControlStates(4);
        % Local air velocity
        OccupantMatrix(n).IndoorEnvironmentVector(3) = ControlStates(6);
        % Local mean radiant temperature
        OccupantMatrix(n).IndoorEnvironmentVector(4) = ControlStates(5);
        % Local relative humidity remains the same as zone level
        % (unaffected by behavior actions)
        OccupantMatrix(n).IndoorEnvironmentVector(2) = ...
            OccupantMatrix(n).IndoorEnvironmentVectorBase(2);
        % Update occupant's physiological information  % Update occupant's physiological information  (YC 2022/02/11)
        OccupantMatrix(n).CurrentClothing = ControlStates(1);
        OccupantMatrix(n).MetabolicRate = ControlStates(3);
        if OccupantMatrix(n).BehaviorStatesVector(3) ~= 0
            OccupantMatrix(n).BehaviorStatesVector(3)=0;
        end
        
        % Update Humphrey's algorithm action need if necessary
        if any(RuleVector == 3)
            OccupantMatrix(n).HumphreysPMVact = humphact;
        end
        
        % In case where behavior rules depend on PMV determination of
        % warm/cool discomfort, determine this discomfort state
        if any(RuleVector >= 4)
            % Update metabolic rate information
            MetInfo = MetabolicRateGenerator(...
                OccupantMatrix(n),DayTime,simtimestep,RuleVector);
            OccupantMatrix(n).METevent = MetInfo(1);
            OccupantMatrix(n).TimeDecay = MetInfo(2);
            OccupantMatrix(n).MetabolicRate = MetInfo(3);
            % Calculate PMV and whether occupant is uncomfortable
            OccupantMatrix(n).PMVdraw = PMV(OccupantMatrix(n),closetting);
            OccupantMatrix(n).PMVact = PMVact(...
                Season,OccupantMatrix(n),postpredmat_sens);
        end
        
        % Run through behavior scheme if PMVact is not zero (indicating
        % comfort
        if (any(RuleVector<=2)||...
                any(RuleVector==3)&&...
                (OccupantMatrix(n).HumphreysPMVact ~= 0)||...
                any(RuleVector >= 4) && ...
                (OccupantMatrix(n).PMVact ~= 0))
            % For an agent-based behavior scheme, form temporary social
            % constraints matrix if occupant is not in a private office and
            % cares about others' comfort level in the zone/office
            if (any(RuleVector >=4))&&...
                    (OccupantMatrix(n).PersonalConstraints(1,2) == 1) && ...
                    ((OccupantMatrix(n).OfficeType ~= 1) && ...
                    (OccupantMatrix(n).OfficeType ~= 4) && ...
                    (OccupantMatrix(n).OfficeType ~= 7))
                % Social constraints for private shared office type
                if (OccupantMatrix(n).OfficeType == 2) || ...
                        (OccupantMatrix(n).OfficeType == 5) || ...
                        (OccupantMatrix(n).OfficeType == 8)
                    % Access structure with a for loop (ZC)
                    InOfficeExt=zeros(1,intnum);
                    OfficeNumExt=zeros(1,intnum);
                    for i=1:intnum
                        InOfficeExt(1,i) = OccupantMatrix(i).InOffice;
                        OfficeNumExt(1,i) = OccupantMatrix(i).OfficeNum;
                    end
                    SocialMatrix = OccupantMatrix(...
                        (InOfficeExt == 1) & ...
                        (OfficeNumExt == ...
                        [OccupantMatrix(n).OfficeNum]));
                    % Social constraints for open office type
                else
                    % Access structure with a for loop (ZC)
                    InOfficeExt=zeros(1,intnum);
                    OfficeTypeExt=zeros(1,intnum);
                    for i=1:intnum
                        InOfficeExt(1,i) = OccupantMatrix(i).InOffice;
                        OfficeTypeExt(1,i) = OccupantMatrix(i).OfficeType;
                    end
                    SocialMatrix = OccupantMatrix(...
                        (InOfficeExt == 1) & ...
                        (OfficeTypeExt == ...
                        [OccupantMatrix(n).OfficeType]));
                end
            else
                SocialMatrix = OccupantMatrix([0 0]&[0 0]);
            end
            
            % Run behavior routine
            if any([OccupantMatrix(n).OccBehaviorInterval]==1)
                OccupantMatrix(n).WhichPMVact=0;
            else
            OccupantMatrix(n) = Behavior(OccupantMatrix(n),...
                SocialMatrix,RuleVector,postpredmat_sens,controls,...
                closetting,Season,group_logisticregression_inter,...
                group_logisticregression_arrive,trm,n);
            end

        end
        
        if OccupantMatrix(n).PMVact == 0
            OccupantMatrix(n).WhichPMVact=0;
        end
        
        % Update relative work performance information based on thermal
        % sensation (given simulated behavior)
        product = 0;
        product = (Productivity(OccupantMatrix(n),postpredmat_sens));
        if isfinite(product)
            OccupantMatrix(n).MeanProductivity(1) = ...
                (OccupantMatrix(n).MeanProductivity(1)+product);
            OccupantMatrix(n).ProductivityCount(1) = ...
                (OccupantMatrix(n).ProductivityCount(1) + 1);
        end
        % Case where occupant is out of the office
    else
        % If agent-based or Humphreys behavior scheme, update relevant
        % PMV/discomfort parameters
        if any(RuleVector >= 3);
            % PMV and discomfort parameters returned to initial unoccupied
            % state
            OccupantMatrix(n).PMVdraw = 0;
            OccupantMatrix(n).PMVact = 0;
            OccupantMatrix(n).HumphreysPMVact = 0;
            % OccupantMatrix(n).ExceedVector = [0 0]; * NOT NECESSARY (?)
        end
        
        % Update behavior states and adjustment possibilities
        if (OccupantMatrix(n).OccupancyStateVectorPrevious(2) == 1)||...
                (((OccupantMatrix(n).OccupancyStateVector(1) == 0)||...
                (OccupantMatrix(n).OccupancyStateVector(1) == 255))&&...
                ((OccupantMatrix(n).OccupancyStateVectorPrevious(1) == 1)))
            
            % Clothing, heaters, fans, drinks, and walks updated to 'off'
            % state/adjustment possibilities when occupant leaves the office
            
            % Behavior current state
            OccupantMatrix(n).BehaviorStatesVector(1:6) = ...
                OccupantMatrix(n).InitialBehaviorStatesVector(1:6);
            % Behavior adjustment possibilities
            OccupantMatrix(n).BehaviorPossibilitiesMatrix(1,1:6) = ...
                OccupantMatrix(n).InitialBehaviorPossibilitiesMatrix(1,1:6);
            OccupantMatrix(n).BehaviorPossibilitiesMatrix(2,1:6) = ...
                OccupantMatrix(n).InitialBehaviorPossibilitiesMatrix(2,1:6);
            
            % For the standard Energy Plus occupancy model, doors/
            % thermostats/windows/blinds are always turned to 'closed/
            % unadjusted' state when occupancy leaves their office. For the
            % simple dynamic occupancy model, doors/thermostats/windows/
            % blinds remain in previous state when walking around the
            % building or going out to lunch, but are forced to an 'closed/
            % unadjusted' state when leaving the office for the end of the
            % day. Clothing is reset to the morning clothing level anytime
            % the occupant leaves the building
            if (OccupantMatrix(n).OccupancyStateVector(1) == 0 || ...
                    OccupantMatrix(n).OccupancyStateVector(1) == 255)
                OccupantMatrix(n).CurrentClothing = ...
                    OccupantMatrix(n).MorningClothing;
                if ((occmodel(1) == 0)|| (occmodel(1) == 3)) % Standard Energy Plus occupancy
                    % Behavior current state
                    OccupantMatrix(n).BehaviorStatesVector(7:10) = ...
                        OccupantMatrix(...
                        n).InitialBehaviorStatesVector(7:10);
                    % Behavior adjustment possibilities
                    OccupantMatrix(n).BehaviorPossibilitiesMatrix(1,7:10) = ...
                        OccupantMatrix(...
                        n).InitialBehaviorPossibilitiesMatrix(1,7:10);
                    OccupantMatrix(...
                        n).BehaviorPossibilitiesMatrix(2,7:10) = ...
                        OccupantMatrix(...
                        n).InitialBehaviorPossibilitiesMatrix(2,7:10);
                else % Simple dynamic occupancy
                    if (holiday==1||WeekTime==1)&&...
                            (OccupantMatrix(n).InSundHolidays==1)&&...
                            (SimulationTime > ...
                            ((OccupantMatrix(n).SHDayEndTime)-(5/60/24)))
                        % Behavior current state
                        OccupantMatrix(n).BehaviorStatesVector(7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorStatesVector(7:10);
                        % Behavior adjustment possibilities
                        OccupantMatrix(n).BehaviorPossibilitiesMatrix(...
                            1,7:10) = OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(1,7:10);
                        OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(2,7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(2,7:10);
                    elseif (WeekTime==7) && ...
                            (OccupantMatrix(n).InSaturday==1) && ...
                            (SimulationTime > ...
                            ((OccupantMatrix(n).SatDayEndTime)-(5/60/24)))
                        % Behavior current state
                        OccupantMatrix(n).BehaviorStatesVector(7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorStatesVector(7:10);
                        % Behavior adjustment possibilities
                        OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(1,7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(1,7:10);
                        OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(2,7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(2,7:10);
                    elseif (WeekTime>1&&WeekTime<7) && (...
                            SimulationTime > ...
                            ((OccupantMatrix(n).DayEndTime) -(5/60/24)))
                        % Behavior current state
                        OccupantMatrix(n).BehaviorStatesVector(7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorStatesVector(7:10);
                        % Behavior adjustment possibilities
                        OccupantMatrix(n).BehaviorPossibilitiesMatrix(...
                            1,7:10) = OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(1,7:10);
                        OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(2,7:10) = ...
                            OccupantMatrix(...
                            n).InitialBehaviorPossibilitiesMatrix(2,7:10);
                    end
                end
            end
        end
    end
    
    % Update states of shared behaviors for those occupants who are sharing
    % the behavior control with the currently updated occupant
    
%  default:       if (OccupantMatrix(n).InOffice == 1) || (...
%             (OccupantMatrix(n).InOffice == 0) && ...
%             OccupantMatrix(n).OccupancyStateVectorPrevious(2) == 1)

    if OccupantMatrix(n).InOffice == 1
        % Search for shared thermostats, doors, windows, and blinds if
        % occupant has each of these behavior options and behavior state has
        % recently changed
        for s = 7:10
            if (any(abs(...
                    OccupantMatrix(n).BehaviorPossibilitiesMatrix(...
                    :,s))>0)==1) && (...
                    OccupantMatrix(n).BehaviorStatesVector(s)~=...
                    OccupantMatrix(n).PreviousBehaviorStatesVector(s))
                % Thermostat state update
                if s == 7
                    % Use for loop to access structure (ZC)
                    SharedThermNumExt = zeros(1,intnum);
                    OccupantNumExt = zeros(1,intnum);
                    for i=1:intnum
                        SharedThermNumExt(1,i) = ...
                            OccupantMatrix(i).SharedThermNum;
                        OccupantNumExt(1,i) = ...
                            OccupantMatrix(i).OccupantNum;
                    end
                    SharedMat = OccupantMatrix(...
                        (SharedThermNumExt == ...
                        [OccupantMatrix(n).SharedThermNum])&...
                        (OccupantNumExt ~= ...
                        [OccupantMatrix(n).OccupantNum]));
                    % Door state update
                elseif s == 8
                    % Use for loop to access structure (ZC)
                    SharedDoorNumExt = zeros(1,intnum);
                    OccupantNumExt = zeros(1,intnum);
                    for i=1:intnum
                        SharedDoorNumExt(1,i) = ...
                            OccupantMatrix(i).SharedDoorNum;
                        OccupantNumExt(1,i) = ...
                            OccupantMatrix(i).OccupantNum;
                    end
                    SharedMat = OccupantMatrix(...
                        (SharedDoorNumExt == ...
                        [OccupantMatrix(n).SharedDoorNum])&...
                        (OccupantNumExt ~= ...
                        [OccupantMatrix(n).OccupantNum]));
                    % Window state update
                elseif s == 9
                    % Use for loop to access structure (ZC)
                    SharedWindowNumExt = zeros(1,intnum);
                    OccupantNumExt = zeros(1,intnum);
                    for i=1:intnum
                        SharedWindowNumExt(1,i) = ...
                            OccupantMatrix(i).SharedWindowNum;
                        OccupantNumExt(1,i) = ...
                            OccupantMatrix(i).OccupantNum;
                    end
                    SharedMat = OccupantMatrix(...
                        (SharedWindowNumExt == ...
                        [OccupantMatrix(n).SharedWindowNum])&...
                        (OccupantNumExt ~= ...
                        [OccupantMatrix(n).OccupantNum]));
                    % Blinds state update
                elseif s == 10
                    % Use for loop to access structure (ZC)
                    SharedBlindNumExt = zeros(1,intnum);
                    OccupantNumExt = zeros(1,intnum);
                    for i=1:intnum
                        SharedBlindNumExt(1,i) = ...
                            OccupantMatrix(i).SharedBlindNum;
                        OccupantNumExt(1,i) = ...
                            OccupantMatrix(i).OccupantNum;
                    end
                    SharedMat = OccupantMatrix(...
                        (SharedBlindNumExt == ...
                        [OccupantMatrix(n).SharedBlindNum])&...
                        (OccupantNumExt ~= ...
                        [OccupantMatrix(n).OccupantNum]));
                end
                
                % Check whether there are shared behaviors to loop
                % through and update
                %                 if isempty(SharedMat)==0
                % Acceess structure with for loop (ZC)
                SharedMatSize = 0;
                SharedMatSize = size(SharedMat,2);
                if SharedMatSize>0
                    OccupantNums = zeros(1,SharedMatSize);
                    for i=1:SharedMatSize
                        OccupantNums(1,i)=SharedMat(i).OccupantNum;
                    end
                    % Update behavior states for all occupants sharing the
                    % behavior
                    for o = 1:size(OccupantNums,2)
                        OccupantMatrix(...
                            OccupantNums(o)).BehaviorStatesVector(s) = ...
                            OccupantMatrix(n).BehaviorStatesVector(s);
                        OccupantMatrix(...
                            OccupantNums(o)).BehaviorPossibilitiesMatrix(...
                            1,s)=OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(1,s);
                        OccupantMatrix(...
                            OccupantNums(o)).BehaviorPossibilitiesMatrix(...
                            2,s)=OccupantMatrix(...
                            n).BehaviorPossibilitiesMatrix(2,s);
                    end
                end
            end
        end
    end
    
    % Reset previous occupancy and behavior states tracking vectors
    OccupantMatrix(n).OccupancyStateVectorPrevious = ...
        OccupantMatrix(n).OccupancyStateVector;
    OccupantMatrix(n).PreviousBehaviorStatesVector = ...
        OccupantMatrix(n).BehaviorStatesVector;
    
end

% After simulating all occupants in one zone, Reset previous occupancy and
% behavior states (YC)
SharedBehaviorState=[0 0 0 0];
% Find the thermostat setpoint status 
for occ=1:size(OccupantMatrix,2)
if (OccupantMatrix(occ).InOffice==1)&&...
        (OccupantMatrix(occ).BehaviorStatesVector(7)==1 ||...
        OccupantMatrix(occ).BehaviorStatesVector(7)==-1 )
    SharedBehaviorState=OccupantMatrix(occ).BehaviorStatesVector(7:10);
end
end
% Update the thermostat setpoint to all occupant in the same zone
for occ=1:size(OccupantMatrix,2)
    if OccupantMatrix(occ).InOffice==0
        OccupantMatrix(occ).BehaviorStatesVector(7:10)=SharedBehaviorState;
    end
 OccupantMatrix(occ).OccupancyStateVectorPrevious = ...
        OccupantMatrix(occ).OccupancyStateVector;
    OccupantMatrix(occ).PreviousBehaviorStatesVector = ...
        OccupantMatrix(occ).BehaviorStatesVector;
end

end