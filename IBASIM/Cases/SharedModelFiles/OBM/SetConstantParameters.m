function [OccupantMatrix] = SetConstantParameters(...
    occupantlist_final_sim,mornclo_seasonaldistributions,...
    SeasonStart,sharedoptions_clist,zoneconstraints_clist,...
    officecontrolconstraintsfull,occmodel,controls,...
    pcontrolconstraints,commutevec,metcalcs,gender,simstarttime,...
    persdeviceloc,postpredmat_accept,RuleVector,randomseedinit,z,...
    OccupantMatrix)
% SetConstantParameters - Initialize characteristics for all occupant
% agents defined based on the Excel setup file

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%    Copyright 2016 Jared Langevin                                         %
%                                                                          %
%    Licensed under the Apache License, Version 2.0 (the "License");       %
%    you may not use this file except in compliance with the License.      %
%    You may obtain a copy of the License at                               %
%                                                                          %
%        http://www.apache.org/licenses/LICENSE-2.0                        %
%                                                                          %
%    Unless required by applicable law or agreed to in writing, software   %
%    distributed under the License is distributed on an "AS IS" BASIS,     %
%    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       %
%    implied. See the License for the specific language governing          %
%    permissions and limitations under the License.                        %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% extrinsic function
coder.extrinsic('mnrnd');
eml.extrinsic('num2str');

%% Declare variable
zoneconstraints = zeros(1,9);
zoneconstraints = zoneconstraints_clist{z};
sharedoptions = zeros(1,3);
sharedoptions = sharedoptions_clist{z};
commute = zeros(1,4);
lunchlength = 0;
c1 = 0;
c2 = 0;
c3 = 0;
c4 = 0;
c5 = 0;
% %% OccupantMatrix Declare
% temp=length(occupantlist_final_sim);
% rrr=repmat({0},1,temp);
% vvv2=repmat({[0 0]},1,temp);
% vvv4=repmat({[0 0 0 0]},1,temp);
% vvv8=repmat({[0 0 0 0 0 0 0 0]},1,temp);
% mmm22=repmat({zeros(2,2)},1,temp);
% mmm25=repmat({zeros(2,5)},1,temp);
% mmm105=repmat({zeros(10,5)},1,temp);
% mmm110=repmat({zeros(1,10)},1,temp);
% mmm210=repmat({zeros(2,10)},1,temp);
% OccupantMatrix = struct('Zone',rrr,'Validate',rrr,'OfficeNum',rrr,...
%     'OfficeType',rrr,'OccupantNum',rrr,'Gender',rrr,'CommuteMet',rrr,...
%     'OutWalkMet',rrr,'InWalkMet',rrr,'BaseMet',rrr,...
%     'CommuteMetDegrade',rrr,'OutWalkMetDegrade',rrr,...
%     'InWalkMetDegrade',rrr,'METevent',rrr,'TimeDecay',rrr,...
%     'MetabolicRate',rrr,'OccupancyStateVector',vvv2,...
%     'OccupancyStateVectorPrevious',vvv2,'InOffice',rrr,...
%     'OutofOffice',rrr,'InSaturday',rrr,'InSundHolidays',rrr,...
%     'DayStartTimeBase',rrr,'LunchStartTimeBase',rrr,...
%     'LunchEndTimeBase',rrr,'DayEndTimeBase',rrr,'DayStartTime',rrr,...
%     'LunchStartTime',rrr, 'LunchEndTime',rrr,'DayEndTime',rrr,...
%     'SatDayStartTimeBase',rrr,'SatLunchStartTimeBase',rrr,...
%     'SatLunchEndTimeBase',rrr,'SatDayEndTimeBase',rrr,...
%     'SatDayStartTime',rrr,'SatLunchStartTime',rrr,...
%     'SatLunchEndTime',rrr,'SatDayEndTime',rrr,...
%     'SHDayStartTimeBase',rrr,'SHLunchStartTimeBase',rrr,...
%     'SHLunchEndTimeBase',rrr,'SHDayEndTimeBase',rrr,...
%     'SHDayStartTime',rrr,'SHLunchStartTime',rrr,...
%     'SHLunchEndTime',rrr,'SHDayEndTime',rrr,...
%     'OfficeWalkProb',rrr,'LeavesLunchProb',rrr,...
%     'MorningClothing',rrr,'CurrentClothing',rrr,...
%     'PersonalConstraints',mmm25,'AcceptabilityVector',vvv8,...
%     'PreferenceClass',vvv4,'BehaviorConstraintsMatrix',mmm210,...
%     'InitialBehaviorPossibilitiesMatrix',mmm210,...
%     'BehaviorPossibilitiesMatrix',mmm210,...
%     'InitialBehaviorHierarchyMatrix',mmm210,...
%     'BehaviorHierarchyMatrix',mmm210,...
%     'InitialBehaviorStatesVector',mmm110,...
%     'BehaviorStatesVector',mmm110,...
%     'PreviousBehaviorStatesVector',mmm110,...
%     'BehaviorConstraintsState',mmm105,...
%     'InitialPersonalDeviceLocation',vvv2,'PersonalDeviceLocation',vvv2,...
%     'SharedThermNum',rrr,'SharedDoorNum',rrr,'SharedWindowNum',rrr,...
%     'SharedBlindNum',rrr,'IndoorEnvironmentVectorBase',vvv4,...
%     'IndoorEnvironmentVector',vvv4,'OutdoorEnvironmentVector',vvv2,...
%     'PMVdraw',rrr,'PMVact',rrr,'HumphreysPMVact',rrr,'WhichPMVact',rrr,...
%     'ExceedWarm',rrr,'ExceedCold',rrr,'MeanProductivity',rrr,...
%     'ProductivityCount',rrr,'OccTimeSteps',rrr);

%% Seed random number generator
rng(randomseedinit,'twister');

% Cycle through all occupant agents defined by the user and initialize
% their parameters
for o=1:size(occupantlist_final_sim,1)
    
    % Occupant identifier information
    OccupantMatrix(o).Zone = occupantlist_final_sim(o,1);
    OccupantMatrix(o).Validate = 0;
    OccupantMatrix(o).OfficeNum = occupantlist_final_sim(o,2);
    OccupantMatrix(o).OfficeType = occupantlist_final_sim(o,3);
    OccupantMatrix(o).OccupantNum = occupantlist_final_sim(o,4);
    
    % Personal characteristics (gender, metabolic rate info.)
    OccupantMatrix(o).Gender = binornd(1,gender(1));
    commute = mnrnd(1,metcalcs(2:5));
    %     OccupantMatrix(o).CommuteMet = commutevec(commute(1:4)>0);
    OccupantMatrix(o).CommuteMet = commute*commutevec;  %+++ZC
    OccupantMatrix(o).OutWalkMet = metcalcs(10);
    OccupantMatrix(o).InWalkMet = metcalcs(11);
    OccupantMatrix(o).BaseMet = metcalcs(12);
    OccupantMatrix(o).CommuteMetDegrade = ...
        (((OccupantMatrix(o).CommuteMet - ...
        OccupantMatrix(o).BaseMet)/2)/(OccupantMatrix(o).CommuteMet - ...
        OccupantMatrix(o).BaseMet)) ^(1/(metcalcs(1)/60/24));
    OccupantMatrix(o).OutWalkMetDegrade = ...
        (((OccupantMatrix(o).OutWalkMet - ...
        OccupantMatrix(o).BaseMet)/2)/(OccupantMatrix(o).OutWalkMet - ...
        OccupantMatrix(o).BaseMet)) ^(1/(metcalcs(1)/60/24));
    OccupantMatrix(o).InWalkMetDegrade = ...
        (((OccupantMatrix(o).InWalkMet - ...
        OccupantMatrix(o).BaseMet)/2)/(OccupantMatrix(o).InWalkMet - ...
        OccupantMatrix(o).BaseMet)) ^(1/(metcalcs(1)/60/24));
    OccupantMatrix(o).METevent = 0;
    OccupantMatrix(o).TimeDecay = 0;
    OccupantMatrix(o).MetabolicRate = 1.1;
    
    % Occupancy (initially out of office)
    
    % Occupancy state vector comprised of two elements; (1) in the building?
    % and (2) in the office?
    OccupantMatrix(o).OccupancyStateVector = [255 255];
    OccupantMatrix(o).OccupancyStateVectorPrevious = [255 255];
    OccupantMatrix(o).InOffice = 0;
    OccupantMatrix(o).OutofOffice = 0;
    
    % Base occupancy times for simple dynamic occupancy model case
    if occmodel(1) == 1
        % Determine if occupant is in on Saturdays and Sundays/holidays
        OccupantMatrix(o).InSaturday = binornd(1,occmodel(7,1));
        OccupantMatrix(o).InSundHolidays = binornd(1,occmodel(8,1));
        
        % Expected weekday arrival time
        OccupantMatrix(o).DayStartTimeBase = ...
            normrnd(occmodel(11,1),(30/60));
        while (OccupantMatrix(o).DayStartTimeBase < 7) || ...
                (OccupantMatrix(o).DayStartTimeBase > 9.5)
            OccupantMatrix(o).DayStartTimeBase = ...
                normrnd(occmodel(11,1),(30/60));
        end
        % Expected weekday lunch start time
        OccupantMatrix(o).LunchStartTimeBase = ...
            normrnd(occmodel(12,1),(30/60));
        if isfinite(OccupantMatrix(o).LunchStartTimeBase)
            while (OccupantMatrix(o).LunchStartTimeBase < 10.5) || ...
                    (OccupantMatrix(o).LunchStartTimeBase > 14)
                OccupantMatrix(o).LunchStartTimeBase = ...
                    normrnd(occmodel(12,1),(30/60));
            end
        end
        lunchlength = normrnd(occmodel(13,1)/60,(30/60));
        while lunchlength < (15/60) || lunchlength > (1.5)
            lunchlength = normrnd(occmodel(13,1)/60,(30/60));
        end
        % Expected weekday lunch end time
        OccupantMatrix(o).LunchEndTimeBase = ...
            OccupantMatrix(o).LunchStartTimeBase + lunchlength;
        % Expected weekday departure time
        OccupantMatrix(o).DayEndTimeBase = ...
            normrnd(occmodel(14,1),(30/60));
        while ((OccupantMatrix(o).DayEndTimeBase < 15) || ...
                (OccupantMatrix(o).DayEndTimeBase > 20))
            OccupantMatrix(o).DayEndTimeBase = ...
                normrnd(occmodel(14,1),(30/60));
            if (isfinite(OccupantMatrix(o).LunchEndTimeBase))
                while (OccupantMatrix(o).DayEndTimeBase <= ...
                        (OccupantMatrix(o).LunchEndTimeBase+0.5))
                    OccupantMatrix(o).DayEndTimeBase = ...
                        normrnd(occmodel(14,1),(30/60));
                end
            end
        end
        % Convert all sampled times to be compatible with absolute
        % simulation time (e.g. given current year of simulation)
        OccupantMatrix(o).DayStartTime = ...
            (OccupantMatrix(o).DayStartTimeBase /24) + ...
            (simstarttime - mod(simstarttime,1));
        OccupantMatrix(o).LunchStartTime = ...
            (OccupantMatrix(o).LunchStartTimeBase /24) + ...
            (simstarttime - mod(simstarttime,1));
        OccupantMatrix(o).LunchEndTime = ...
            (OccupantMatrix(o).LunchEndTimeBase /24) + ...
            (simstarttime - mod(simstarttime,1));
        OccupantMatrix(o).DayEndTime = ...
            (OccupantMatrix(o).DayEndTimeBase /24) + ...
            (simstarttime - mod(simstarttime,1));
        
        % Case where occupant is in the office on Saturdays
        if OccupantMatrix(o).InSaturday == 1
            % Expected Saturday arrival time
            OccupantMatrix(o).SatDayStartTimeBase = ...
                normrnd(occmodel(11,2),(30/60));
            while (OccupantMatrix(o).SatDayStartTimeBase < 7) || ...
                    (OccupantMatrix(o).SatDayStartTimeBase > 9.5)
                OccupantMatrix(o).SatDayStartTimeBase = ...
                    normrnd(occmodel(11,2),(30/60));
            end
            % Expected Saturday lunch start time
            OccupantMatrix(o).SatLunchStartTimeBase = ...
                normrnd(occmodel(12,2),(30/60));
            if isfinite(OccupantMatrix(o).SatLunchStartTimeBase)
                while (OccupantMatrix(o).SatLunchStartTimeBase < 10.5) || ...
                        (OccupantMatrix(o).SatLunchStartTimeBase > 14)
                    OccupantMatrix(o).SatLunchStartTimeBase = ...
                        normrnd(occmodel(12,2),(30/60));
                end
            end
            % Expected Saturday lunch end time
            OccupantMatrix(o).SatLunchEndTimeBase = ...
                OccupantMatrix(o).SatLunchStartTimeBase + lunchlength;
            % Expected Saturday departure time
            OccupantMatrix(o).SatDayEndTimeBase = ...
                normrnd(occmodel(14,2),(30/60));
            while ((OccupantMatrix(o).SatDayEndTimeBase <= 10) || ...
                    (OccupantMatrix(o).DayEndTimeBase > 20))
                OccupantMatrix(o).SatDayEndTimeBase = ...
                    normrnd(occmodel(14,2),(30/60));
                if (isfinite(OccupantMatrix(o).SatLunchEndTimeBase))
                    while ((OccupantMatrix(o).SatDayEndTimeBase <= ...
                            (OccupantMatrix(o).SatLunchEndTimeBase+0.5)) || ...
                            (OccupantMatrix(o).SatDayEndTimeBase <= ...
                            (OccupantMatrix(o).SatDayStartTimeBase+0.5)))
                        OccupantMatrix(o).SatDayEndTimeBase = ...
                            normrnd(occmodel(14,2),(30/60));
                    end
                end
            end
            % Convert all sampled times to be compatible with absolute
            % simulation time (e.g. given current year of simulation)
            OccupantMatrix(o).SatDayStartTime = ...
                (OccupantMatrix(o).SatDayStartTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SatLunchStartTime = ...
                (OccupantMatrix(o).SatLunchStartTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SatLunchEndTime = ...
                (OccupantMatrix(o).SatLunchEndTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SatDayEndTime = ...
                (OccupantMatrix(o).SatDayEndTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
        end
        
        % Case where occupant comes in on Sundays/holidays
        if OccupantMatrix(o).InSundHolidays == 1
            % Expected Sunday arrival time
            OccupantMatrix(o).SHDayStartTimeBase = ...
                normrnd(occmodel(11,3),(30/60));
            while (OccupantMatrix(o).SHDayStartTimeBase < 7) || ...
                    (OccupantMatrix(o).SHDayStartTimeBase > 9.5)
                OccupantMatrix(o).SHDayStartTimeBase = ...
                    normrnd(occmodel(11,3),(30/60));
            end
            % Expected Sunday lunch start time
            OccupantMatrix(o).SHLunchStartTimeBase = ...
                normrnd(occmodel(12,3),(30/60));
            if isfinite(OccupantMatrix(o).SHLunchStartTimeBase)
                while (OccupantMatrix(o).SHLunchStartTimeBase < 10.5) || ...
                        (OccupantMatrix(o).SHLunchStartTimeBase > 14)
                    OccupantMatrix(o).SHLunchStartTimeBase = ...
                        normrnd(occmodel(12,3),(30/60));
                end
            end
            % Expected Sunday lunch end time
            OccupantMatrix(o).SHLunchEndTimeBase = ...
                OccupantMatrix(o).SHLunchStartTimeBase + lunchlength;
            % Expected Sunday departure time
            OccupantMatrix(o).SHDayEndTimeBase = ...
                normrnd(occmodel(14,3),(30/60));
            while ((OccupantMatrix(o).SHDayEndTimeBase <= 10) || ...
                    (OccupantMatrix(o).DayEndTimeBase > 20))
                OccupantMatrix(o).SHDayEndTimeBase = ...
                    normrnd(occmodel(14,3),(30/60));
                if (isfinite(OccupantMatrix(o).SHLunchEndTimeBase))
                    while ((OccupantMatrix(o).SHDayEndTimeBase <= ...
                            (OccupantMatrix(o).SHLunchEndTimeBase+0.5))||...
                            (OccupantMatrix(o).SHDayEndTimeBase <= ...
                            (OccupantMatrix(o).SHDayStartTimeBase+0.5)))
                        OccupantMatrix(o).SHDayEndTimeBase = ...
                            normrnd(occmodel(14,3),(30/60));
                    end
                end
            end
            % Convert all sampled times to be compatible with absolute
            % simulation time (e.g. given current year of simulation)
            OccupantMatrix(o).SHDayStartTime = ...
                (OccupantMatrix(o).SHDayStartTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SHLunchStartTime = ...
                (OccupantMatrix(o).SHLunchStartTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SHLunchEndTime = ...
                (OccupantMatrix(o).SHLunchEndTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
            OccupantMatrix(o).SHDayEndTime = ...
                (OccupantMatrix(o).SHDayEndTimeBase /24) + ...
                (simstarttime - mod(simstarttime,1));
        end
        
        % Walkabout probability
        OccupantMatrix(o).OfficeWalkProb = normrnd(occmodel(5,1),0.15);
        while (OccupantMatrix(o).OfficeWalkProb <0 || ...
                OccupantMatrix(o).OfficeWalkProb >1)
            OccupantMatrix(o).OfficeWalkProb = normrnd(occmodel(5,1),0.15);
        end
        % Leaves building during lunch probability
        OccupantMatrix(o).LeavesLunchProb = normrnd(occmodel(6,1),0.15);
        while (OccupantMatrix(o).LeavesLunchProb <0 || ...
                OccupantMatrix(o).LeavesLunchProb >1)
            OccupantMatrix(o).LeavesLunchProb = ...
                normrnd(occmodel(6,1),0.25);
        end
    end
    
    % Morning clothing (upon arrival)
    %     OccupantMatrix(o).MorningClothing = ...
    %         lognrnd(mornclo_seasonaldistributions((SeasonStart),1),...
    %         mornclo_seasonaldistributions((SeasonStart),2));
    InitialClo=[0.425,0.55, 0.65, 0.525];
    OccupantMatrix(o).MorningClothing = InitialClo(SeasonStart);
    while OccupantMatrix(o).MorningClothing<0.3 && ...
            OccupantMatrix(o).MorningClothing>1.3
        OccupantMatrix(o).MorningClothing = ...
            lognrnd(mornclo_seasonaldistributions(...
            (SeasonStart),1),mornclo_seasonaldistributions(...
            (SeasonStart),2));
    end
    % Current clothing
    OccupantMatrix(o).CurrentClothing = OccupantMatrix(o).MorningClothing;
    
    % Personal control constraints (defined in Excel setup file; occupant
    % would not use a conrol when: management forbids it; it makes others
    % uncomfortable; it uses too much energy; it is too disruptive to their
    % work; they don't understand how the control actually works/its effect
    c1 = binornd(1,pcontrolconstraints(1));
    c2 = binornd(1,pcontrolconstraints(2));
    c3 = binornd(1,pcontrolconstraints(3));
    c4 = binornd(1,pcontrolconstraints(4));
    c5 = binornd(1,pcontrolconstraints(5));
    OccupantMatrix(o).PersonalConstraints = [ c1 c2 c3 c4 c5 ;...
        pcontrolconstraints(:,2)'];
    
    % Seasonal thermal acceptability range (except in case where user has
    % forced it to be standard acceptability range of slightly cool to
    % slightly warm
    if any(RuleVector == 4) % == 1
        OccupantMatrix(o).AcceptabilityVector = [-1 1 -1 1 -1 1 -1 1];
    else
        OccupantMatrix(o).AcceptabilityVector = ...
            AcceptRangeGenerator(postpredmat_accept);
        for s = 1:4
            if median(OccupantMatrix(o).AcceptabilityVector(...
                    ((s*2)-1)):1:...
                    OccupantMatrix(o).AcceptabilityVector(s*2)) <= 0
                OccupantMatrix(o).PreferenceClass(s) = 0;
            else
                OccupantMatrix(o).PreferenceClass(s) = 1;
            end
        end
    end
    
    % External behavior constraints (e.g., from management,
    % from others in the office or
    % from a state constraint on the control)
    OccupantMatrix(o).BehaviorConstraintsMatrix = ...
        [[zoneconstraints(1) zoneconstraints]; ...
        [officecontrolconstraintsfull(OccupantMatrix(o).OfficeType,1) ...
        officecontrolconstraintsfull(OccupantMatrix(o).OfficeType,:)]];
    
    % Personal behavior possibilities (note in one user-selected rule,
    % no clothing adjustment is possible)
    if any(RuleVector == 5) %== 1
        OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,1) = ...
            zeros(2,1);
        OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,2) = ...
            zeros(2,1);
        for c = 3:size(OccupantMatrix(o).BehaviorConstraintsMatrix,2)
            if any(OccupantMatrix(o).BehaviorConstraintsMatrix(:,c) == 0)%== 1
                OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,c) = ...
                    zeros(2,1);
            else
                OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,c) = ...
                    [controls(c,1);controls(c,2)];
            end
        end
    else
        for c = 1:size(OccupantMatrix(o).BehaviorConstraintsMatrix,2)
            if any(OccupantMatrix(o).BehaviorConstraintsMatrix(:,c) == 0)%== 1
                OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,c) = ...
                    zeros(2,1);
            else
                OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(:,c) = ...
                    [controls(c,1);controls(c,2)];
            end
        end
    end
    OccupantMatrix(o).BehaviorPossibilitiesMatrix = ...
        OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix;
    
    % Behavior hierarchy
    OccupantMatrix(o).InitialBehaviorHierarchyMatrix = controls(:,8:9)';
    OccupantMatrix(o).BehaviorHierarchyMatrix = ...
        OccupantMatrix(o).InitialBehaviorHierarchyMatrix;
    
    % Behavior states
    OccupantMatrix(o).InitialBehaviorStatesVector = zeros(1,10);
    OccupantMatrix(o).BehaviorStatesVector = ...
        OccupantMatrix(o).InitialBehaviorStatesVector;
    OccupantMatrix(o).PreviousBehaviorStatesVector = ...
        OccupantMatrix(o).InitialBehaviorStatesVector;
    
    % Behavior constraints state
    OccupantMatrix(o).BehaviorConstraintsState = zeros(10,5);
    
    % Personal heating/cooling device location
    if OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(2,5)>0
        OccupantMatrix(o).InitialPersonalDeviceLocation(1) = ...
            binornd(1,persdeviceloc(1));
        OccupantMatrix(o).PersonalDeviceLocation(1) = ...
            OccupantMatrix(o).InitialPersonalDeviceLocation(1);
    end
    if OccupantMatrix(o).InitialBehaviorPossibilitiesMatrix(1,6)>0
        OccupantMatrix(o).InitialPersonalDeviceLocation(2) = ...
            binornd(1,persdeviceloc(2));
        OccupantMatrix(o).PersonalDeviceLocation(2) = ...
            OccupantMatrix(o).InitialPersonalDeviceLocation(2);
    end
    
    % Shared controls (dependent upon office type constraint settings in
    % Excel setup file)
    
    % Shared thermostats
    if (any(OccupantMatrix(o).BehaviorConstraintsMatrix(:,7) == 0))||...
            ((OccupantMatrix(o).OfficeType == 1)||...
            (OccupantMatrix(o).OfficeType == 4)||...
            (OccupantMatrix(o).OfficeType == 7))||((sharedoptions(1)==0))
        OccupantMatrix(o).SharedThermNum = NaN;
    else
        if ((OccupantMatrix(o).OfficeType == 2)||...
                (OccupantMatrix(o).OfficeType == 5)||...
                (OccupantMatrix(o).OfficeType == 8))
            %                 OccupantMatrix(o).SharedThermNum = ...
            %                     str2double([...
            %                     num2str(OccupantMatrix(o).Zone) ...
            %                     num2str(OccupantMatrix(o).OfficeNum)]);
            OccupantMatrix(o).SharedThermNum=1; % YC modify, for all simulated zone, the number of sharing thermostate is 1
        else
            if sharedoptions(1) == 1
                OccupantMatrix(o).SharedThermNum = 1;
            else
                % If occupant number is less than number of available
                % thermostats, shared thermostat number is occupant
                % number
                if OccupantMatrix(o).OccupantNum <= sharedoptions(1)
                    OccupantMatrix(o).SharedThermNum = ...
                        OccupantMatrix(o).OccupantNum;
                    % Otherwise, shared thermostat number is randomly
                    % selected
                else
                    OccupantMatrix(o).SharedThermNum = ...
                        randi([1,sharedoptions(1)]);
                end
            end
        end
    end
    
    % Shared doors
    if (any(OccupantMatrix(o).BehaviorConstraintsMatrix(:,8) == 0))||...
            ((OccupantMatrix(o).OfficeType == 1)||...
            (OccupantMatrix(o).OfficeType == 4)||...
            (OccupantMatrix(o).OfficeType == 7))||...
            ((sharedoptions(2)==0))
        OccupantMatrix(o).SharedDoorNum = NaN;
    else
        if ((OccupantMatrix(o).OfficeType == 2)||...
                (OccupantMatrix(o).OfficeType == 5)||...
                (OccupantMatrix(o).OfficeType == 8))
            OccupantMatrix(o).SharedDoorNum = ...
                str2double([num2str(OccupantMatrix(o).Zone) ...
                num2str(OccupantMatrix(o).OfficeNum)]);
        else
            if sharedoptions(2) == 1
                OccupantMatrix(o).SharedDoorNum = 1;
            else
                % If occupant number is less than number of available
                % doors, shared door number is occupant number
                if OccupantMatrix(o).OccupantNum <= sharedoptions(2)
                    OccupantMatrix(o).SharedDoorNum = ...
                        OccupantMatrix(o).OccupantNum;
                    % Otherwise, shared door number is randomly selected
                else
                    OccupantMatrix(o).SharedDoorNum = ...
                        randi([1,sharedoptions(2)]);
                end
            end
        end
    end
    
    % Shared windows
    if (any(OccupantMatrix(o).BehaviorConstraintsMatrix(:,9) == 0))||...
            ((OccupantMatrix(o).OfficeType == 1)||...
            (OccupantMatrix(o).OfficeType == 4)||...
            (OccupantMatrix(o).OfficeType == 7))||((sharedoptions(3)==0))
        OccupantMatrix(o).SharedWindowNum = NaN;
    else
        if ((OccupantMatrix(o).OfficeType == 2)||...
                (OccupantMatrix(o).OfficeType == 5)||...
                (OccupantMatrix(o).OfficeType == 8))
            OccupantMatrix(o).SharedWindowNum = ...
                str2double(...
                [num2str(OccupantMatrix(o).Zone)...
                num2str(OccupantMatrix(o).OfficeNum)]);
        else
            if sharedoptions(3) == 1
                OccupantMatrix(o).SharedWindowNum = 1;
            else
                % If occupant number is less than number of available
                % windows, shared window number is occupant number
                if OccupantMatrix(o).OccupantNum <= sharedoptions(3)
                    OccupantMatrix(o).SharedWindowNum = ...
                        OccupantMatrix(o).OccupantNum;
                    % Otherwise, shared window number is randomly selected
                else
                    OccupantMatrix(o).SharedWindowNum = ...
                        randi([1,sharedoptions(3)]);
                end
            end
        end
    end
    
    % Shared blinds (same as shared windows)
    if (isfinite(OccupantMatrix(o).SharedWindowNum)) && ...
            (OccupantMatrix(o).BehaviorConstraintsMatrix(1,10)~=0)
        OccupantMatrix(o).SharedBlindNum = ...
            OccupantMatrix(o).SharedWindowNum ;
    else
        OccupantMatrix(o).SharedBlindNum = NaN;
    end
    %
    % Indoor/outdoor environment parameters
    OccupantMatrix(o).IndoorEnvironmentVectorBase = [23 50 0.05 23];
    OccupantMatrix(o).IndoorEnvironmentVector = ...
        OccupantMatrix(o).IndoorEnvironmentVectorBase;
    OccupantMatrix(o).OutdoorEnvironmentVector = [1 50];
    
    % Behavioral action-related parameters and counters
    OccupantMatrix(o).PMVdraw = 0;
    OccupantMatrix(o).PMVact = 0;
    OccupantMatrix(o).HumphreysPMVact = 0;
    OccupantMatrix(o).WhichPMVact = 0;
    OccupantMatrix(o).ExceedWarm = 0;
    OccupantMatrix(o).ExceedCold = 0;
    OccupantMatrix(o).MeanProductivity = 0;
    OccupantMatrix(o).ProductivityCount = 0;
    OccupantMatrix(o).OccTimeSteps = 0;
    OccupantMatrix(o).OccPosition = [0 0];
    
end
end

